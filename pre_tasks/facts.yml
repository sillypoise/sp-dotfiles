---
# Debug the current Ansible user and environment user
- name: Debug | Show current Ansible user
  ansible.builtin.debug:
    msg: "Ansible is using the user: {{ ansible_user }}"

- name: Debug | Show environment user from ansible_env
  ansible.builtin.debug:
    msg: "The environment user is: {{ ansible_env['USER'] }}"

- name: Set default user for become if not defined
  ansible.builtin.set_fact:
    become_target_user: "{{ become_user | default(ansible_user) }}"
  tags:
    - always

# Register Current User if Undefined
- name: Register Current User if Undefined
  ansible.builtin.set_fact:
    host_user: "{{ host_user }}"
  tags:
    - always

- name: Debug | Show Current User
  ansible.builtin.debug:
    msg: "Current Host User: {{ host_user }}"
  tags:
    - always

# Detect 1Password CLI installation
- name: Detect 1Password CLI
  ansible.builtin.command:
    cmd: which op
  changed_when: false
  failed_when: false
  register: op_detection
  tags:
    - always

- name: Set 1Password Installed Status
  ansible.builtin.set_fact:
    facts_op_installed: "{{ op_detection.rc == 0 }}"
  tags:
    - always

- name: Debug | Show 1Password Installed Status
  ansible.builtin.debug:
    msg: "1Password Installed: {{ facts_op_installed }}"
  tags:
    - always

# Detect Nix installation
- name: Detect Nix Installation
  ansible.builtin.shell: |
    . /etc/profile.d/nix.sh
    which nix
  changed_when: false
  failed_when: false
  register: nix_detection
  tags:
    - always

- name: Set Nix Installed Status
  ansible.builtin.set_fact:
    facts_nix_installed: "{{ nix_detection.rc == 0 }}"
  tags:
    - always

- name: Debug | Show Nix Installed Status
  ansible.builtin.debug:
    msg: "Nix Installed: {{ facts_nix_installed }}"
  tags:
    - always

# Detect Zsh installation
- name: Detect Zsh Installation
  ansible.builtin.command:
    cmd: which zsh
  changed_when: false
  failed_when: false
  register: zsh_detection
  tags:
    - always

- name: Set Zsh Installed Status
  ansible.builtin.set_fact:
    facts_zsh_installed: "{{ zsh_detection.rc == 0 }}"
  tags:
    - always

- name: Debug | Show Zsh Installed Status
  ansible.builtin.debug:
    msg: "Zsh Installed: {{ facts_zsh_installed }}"
  tags:
    - always

# Check if Zsh configuration directory and vars.secret file exist
- name: Check if Zsh config directory exists
  ansible.builtin.stat:
    path: "{{ host_user_home }}/.config/zsh"
  register: zsh_config_dir
  tags:
    - always

- name: Check if vars.secret file exists in Zsh config
  ansible.builtin.stat:
    path: "{{ host_user_home }}/.config/zsh/vars.secret"
  register: zsh_vars_secret_file
  tags:
    - always

- name: Set Zsh Config Installed Status
  ansible.builtin.set_fact:
    facts_zsh_config_installed: "{{ zsh_config_dir.stat.exists and zsh_vars_secret_file.stat.exists }}"
  tags:
    - always

- name: Debug | Show zsh config installed status
  ansible.builtin.debug:
    msg: "zsh config installed: {{ facts_zsh_config_installed }}"
  tags:
    - always

# Detect sillypoise User
- name: Detect sillypoise User
  ansible.builtin.command:
    cmd: id -u sillypoise
  changed_when: false
  failed_when: false
  register: sillypoise_user_detection
  tags:
    - always

- name: Set sillypoise User Existence Status
  ansible.builtin.set_fact:
    facts_sillypoise_exists: "{{ sillypoise_user_detection.rc == 0 }}"
  tags:
    - always

- name: Debug | Show sillypoise User Existence Status
  ansible.builtin.debug:
    msg: "sillypoise User Exists: {{ facts_sillypoise_exists }}"
  tags:
    - always

# Detect flubber User
- name: Detect flubber User
  ansible.builtin.command:
    cmd: id -u flubber
  changed_when: false
  failed_when: false
  register: flubber_user_detection
  tags:
    - always

- name: Set flubber User Existence Status
  ansible.builtin.set_fact:
    facts_flubber_exists: "{{ flubber_user_detection.rc == 0 }}"
  tags:
    - always

- name: Debug | Show flubber User Existence Status
  ansible.builtin.debug:
    msg: "flubber User Exists: {{ facts_flubber_exists }}"
  tags:
    - always

# Detect Tailscale installation
- name: Detect Tailscale Installation
  become_user: "{{ host_user }}"
  ansible.builtin.command:
    cmd: which tailscale
  changed_when: false
  failed_when: false
  register: tailscale_detection
  when: facts_sillypoise_exists
  tags:
    - always

- name: Set Tailscale Installed Status
  ansible.builtin.set_fact:
    facts_tailscale_installed: "{{ tailscale_detection.rc | default(1) == 0 }}"
  when: tailscale_detection is defined and not tailscale_detection.skipped | default(false)
  tags:
    - always

- name: Set Tailscale Not Installed (when detection skipped)
  ansible.builtin.set_fact:
    facts_tailscale_installed: false
  when: tailscale_detection is not defined or tailscale_detection.skipped | default(false)
  tags:
    - always

- name: Debug | Show Tailscale Installed Status
  ansible.builtin.debug:
    msg: "Tailscale Installed: {{ facts_tailscale_installed }}"
  tags:
    - always

# Verify Tailscale Authentication
- name: Fetch Tailscale authentication status
  ansible.builtin.command:
    cmd: tailscale status --json
  changed_when: false
  failed_when: false
  register: tailscale_auth_status
  when: facts_tailscale_installed
  tags:
    - always

- name: Set Tailscale Authenticated Status
  ansible.builtin.set_fact:
    facts_tailscale_authed: "{{ (tailscale_auth_status.stdout | from_json).Self.Online | default(false) }}"
  when: 
    - facts_tailscale_installed
    - tailscale_auth_status is defined
    - not tailscale_auth_status.skipped | default(false)
    - tailscale_auth_status.rc == 0
  tags:
    - always

- name: Set Tailscale Not Authenticated (when detection skipped or failed)
  ansible.builtin.set_fact:
    facts_tailscale_authed: false
  when: >
    not facts_tailscale_installed or
    tailscale_auth_status is not defined or
    tailscale_auth_status.skipped | default(false) or
    tailscale_auth_status.rc | default(1) != 0
  tags:
    - always

- name: Debug | Show Tailscale Authenticated Status
  ansible.builtin.debug:
    msg: "Tailscale Authenticated: {{ facts_tailscale_authed }}"
  tags:
    - always

# Check if GitHub CLI (gh) is installed
- name: Detect GitHub CLI (gh) Installation
  become_user: "{{ host_user }}"
  ansible.builtin.command:
    cmd: which gh
  changed_when: false
  failed_when: false
  register: gh_detection
  when: facts_sillypoise_exists and facts_nix_installed
  tags:
    - always

- name: Set GitHub CLI Installed Status
  ansible.builtin.set_fact:
    facts_gh_installed: "{{ gh_detection.rc | default(1) == 0 }}"
  when: gh_detection is defined and not gh_detection.skipped | default(false)
  tags:
    - always

- name: Set GitHub CLI Not Installed (when detection skipped)
  ansible.builtin.set_fact:
    facts_gh_installed: false
  when: gh_detection is not defined or gh_detection.skipped | default(false)
  tags:
    - always

- name: Debug | Show GitHub CLI Installed Status
  ansible.builtin.debug:
    msg: "GitHub CLI Installed: {{ facts_gh_installed }}"
  tags:
    - always

# Verify GitHub Authentication
- name: Check GitHub Authentication Status
  become_user: "{{ host_user }}"
  ansible.builtin.command:
    cmd: gh auth status
  changed_when: false
  failed_when: false
  register: gh_auth_status
  when: facts_gh_installed and facts_zsh_config_installed
  tags:
    - always

- name: Set GitHub Authenticated Status
  ansible.builtin.set_fact:
    facts_gh_authed: "{{ 'Logged in to github.com' in gh_auth_status.stdout }}"
  when: 
    - facts_gh_installed
    - gh_auth_status is defined
    - not gh_auth_status.skipped | default(false)
  tags:
    - always

- name: Set GitHub Not Authenticated (when detection skipped)
  ansible.builtin.set_fact:
    facts_gh_authed: false
  when: >
    not facts_gh_installed or
    gh_auth_status is not defined or
    gh_auth_status.skipped | default(false)
  tags:
    - always

- name: Debug | Show GitHub Authenticated Status
  ansible.builtin.debug:
    msg: "GitHub Authenticated: {{ facts_gh_authed }}"
  tags:
    - always
